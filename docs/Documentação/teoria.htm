<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">

<HTML>

<HEAD>
	<TITLE>Fundamentação Teórica Básica</TITLE>
	<LINK REV="Made" HREF="mailto:magsilva@din.uem.br">
	<META NAME="Author" CONTENT="Marco Aurélio Graciotto Silva">
	<META NAME="Keywords" CONTENT="fundamentação teórica, engenharia, software">
	<META NAME="Description" CONTENT="Fundamentação teórica bem básica sobre engenharia de software">
	<META NAME="Generator" CONTENT="NoteTab Light 4.84 HTML4-strict.clb">
</HEAD>

<BODY>

<h1>Fundamentação teórica sobre engenharia de software</h1>

<P>Nos primórdios da computação, criar programas era uma arte restrita a poucos. Não haviam técnicas, processos nem metodologias estudados, testados e difundidos. Obviamente tal situação não se sustentou, com a complexidade dos problemas - os requisitos dos usuários - crescendo drasticamente ao longo dos anos. Desenvolveram-se, então, diversas soluções para tornar tal tarefa mais eficiente, novas abordagens: a engenharia de software estava, enfim, nascendo, recebendo seu devido reconhecimento.</P>

<P>Uma definição simples - e muito eficaz - de engenharia de software foi criada por Fritz Bauer:</p>

<quote>"O estabelecimento e uso de sólidos princípios de engenharia para que se possa obter economicamente um software que seja confiável e que funcione eficientemente em máquinas reais."</quote>

<P>Os trabalhos realizados para alcançar este objetivo giram em torno de métodos, ferramentas e procedimentos. Os métodos proporcionam os detalhes de como fazer para construir o software, as ferramentas apoiam os métodos, automatizando-os, os procedimentos unem os métodos e ferramentas, definindo como estes serão utilizados, que produtos devem ser obtidos, gerando métricas, etc. No entanto, somente isto não é suficiente. Necessita-se estabelecer uma organização na aplicação dos procedimentos, métodos e ferramentas, objetivando construir o software da maneira mais eficiente possível. Chamamos isto de paradigma de engenharia de software. Alguns exemplos de paradigmas são: ciclo de vida básico, prototipação, modelo espiral. O mais interessante, porém, é a combinação dos vários paradigmas, aproveitando seus pontos fortes e amenizando seus pontos fracos.</P>

<P>Independemente do paradigma que esteja sendo utilizado, ele abrangerá, ao menos, três fases, básicas do processo de desenvolvimento de software:</P>
<UL>
	<LI>Definição: identifica os requisitos, funcionais e não-funcionais, interfaces, critérios de validação. Esta fase constitui-se em, ao menos, três etapas:
		<UL>
			<LI>Análise do sistema: identificam-se os elementos que compõe o sistema, identificando seus respectivos papeis.</LI>
			<LI>Planejamento do projeto de software: analisam-se os riscos, custos, recursos a serem alocados, definem-se as tarefas a serem feitas.</LI>
			<LI>Análise de requisitos: define-se detalhadamente os requisitos do software.</LI>
		</UL>
	</LI>
	<LI>Desenvolvimento: define-se como fazer o software. Comumente temos três etapas:
		<UL>
			<LI>Projeto: descrever estruturas de dados, arquitetura, procedimentos e qualquer outro elemento necessário para auxiliar a tradução dos requisitos, estabelecidos na fase anterior, no software propriamente dito.</LI>
			<LI>Codificação: baseado nos produtos gerados até então no processo, cria-se o código necessário para tornar o software realidade. É a definição mais formal que alcançamos na definição do software, possibilitando a transformação desta definição em código de máquina.</LI>
			<LI>Teste: etapa dedicada exclusivamente na descoberta de falhas e erros no software.</LI>
		</UL>
	</LI>
	<LI>Manutenção: adaptar o software a novas situações: novos requisitos, correção de erros, adaptações.</LI>
</UL>

<P>Outra fase, não citada até agora, mas não por isso menos importante, é a engenharia reversa. Software antigos, sem documentação que possibilite seu entendimento, obrigam os engenheiros a descobrirem o funcionamento do programa. Esta tarefa é muito cara, lenta e seus resultados podem nem insatisfatórios, sendo uma solução mais viável, as vezes, reescrever o software do zero.</P>

<P>Durante estas fases, temos a execução de várias outras atividades, visando uma melhor qualidade do software, otimização do processo, para citar apenas algumas. Um exemplo concreto seriam as revisões, que é um meio muito eficiente para encontrar erros prematuramente, o que ajuda a reduzir os custos da produção do software.</P>

</BODY>

</HTML>
